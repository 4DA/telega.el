#+OPTIONS: timestamp:nil \n:t
#+TITLE: Telega Manual
#+AUTHOR: Zajcev Evgeny
#+startup: showall

#+begin_quote
This file is automatically generated from =telega-ellit.org= by
[[https://github.com/zevlg/ellit-org.el][GitHub#ellit-org.el]] tool.
Do not edit manually.  Modify =telega-ellit.org= or comments in
=.el= files instead.
#+end_quote

* Telega glossary

Before start, please read [[https://core.telegram.org/tdlib/getting-started#tdlib-glossary][TDLib glossary]]

=telega= tries to keep TDLib's terminology, however introduces some
new terms specific to =telega=.  All of them are used in the manual.

- Root Buffer a.k.a. rootbuf :: 
     Buffer with list of chats, you see it just after @@html:<kbd>@@M-x telega RET@@html:</kbd>@@.
     Most of the time rootbuf term is used in the manual.
     See [[#root-buffer][Root Buffer]]

- Chat Buffer a.k.a. chatbuf :: 
     Buffer with chat contents.
     See [[#chat-buffer][Chat Buffer]]

- Button :: 
     Ordinary Emacs Button (see =button.el=).  Some outlined area with
     text, that can be acted on.  Pressing @@html:<kbd>@@RET@@html:</kbd>@@ on the
     button, executes button action.  There are many buttons of different
     kind in =telega=

- Chat Button :: 
     Button referring to some chat.  Action for such button is to open
     corresponding chatbuf.

     rootbuf lists the chat buttons, such as:
     #+begin_example
       {ðŸŽ—Saved Messages            }ðŸ“Œ  ðŸ“¹ Video (10s)               Friâœ“
       [Emacs | Emacs (english)     ]  @oldosfan: same                Fri
       ...
     #+end_example

- Chat Filter :: 
     S-exp expression used to match chats.
     See [[#chat-filters][Chat Filters]] for the details.

- Active Chat Filter :: 
     Chat filter applied to the chat list in rootbuf.

     Only chats matching active chat filter are displayed in rootbuf.
     Active chat filter is displayed above the chat list in rootbuf, such
     as:
     #+begin_example
       -/------------------------------(main)--------------------------------
     #+end_example

     ~(telega-filter-active)~ returns active chat filter.

  - User Option: ~telega-filter-default~
    Default chat filter to apply.

    Default value: main

- Custom Chat Filter :: 
     Chat filter associated with a name.

     Custom chat filters are displayed as buttons above the chat list in
     the rootbuf, such as:
     #+begin_example
       [243:ðŸ“‘Main      4890]  [51:Groups       4677]  [27:Channels      210]  
       [53:Contacts         ]  [0:Important         ]  [3:ðŸ“‘Archive      670]  
     #+end_example

     Action for such buttons is to add corresponding chat filter to
     active chat filter.

     However, special (push) custom chat filter buttons exists.  Instead
     of adding chat filter into active chat filter, they substitutes
     active chat filter with custom chat filter. See
     ~telega-filter-custom-push-list~ below.

  - User Option: ~telega-filters-custom~
    Alist of custom filters in form (NAME . FILTER).

  - User Option: ~telega-filter-custom-push-list~
    List of custom filters to use ~telega-filters-push~ instead of ~telega-filter-add~.

    Default value: ("ðŸ“‘Archive")

- Chat Sort Criteria :: 
     List of symbols denoting how to sort chats.
     See [[#sorting-chats][Sorting Chats]]

- Active Sort Criteria a.k.a. active sorter :: 
     Sort criteria applied to the chat list in rootbuf.

     By default, chats are sorted according to internal Telegram order
     (except for chats with custom order).

     In case active sorter is enabled, it is displayed above the chat
     list in rootbuf, such as:
     #+begin_example
       -\---------------------(unread-count join-date)-----------------------
     #+end_example

- Me user a.k.a. me :: 
     User currently logged in, ~(telega-user-me)~ returns me.

     me means you, not me.

     Chat with me is also known as "Saved Messages".

* Root Buffer

rootbuf is the heart of =telega=.

*TODO*: describe parts of the rootbuf

** Fast navigation

@@html:<kbd>@@M-g@@html:</kbd>@@ prefix in rootbuf is used to jump across chat buttons.

- Key: @@html:<kbd>@@M-g u@@html:</kbd>@@ (~telega-root-next-unread~)

  Move point to the next chat with unread message.

- Key: @@html:<kbd>@@M-g i@@html:</kbd>@@ (~telega-root-next-important~)

  Move point to the next chat with important messages.

  Important message is unseen message in chat with enabled
  notifications. i.e. matching ~(and unread unmuted)~
  [[#chat-filters][chat filter]].

- Key: @@html:<kbd>@@M-g @@@html:</kbd>@@, @@html:<kbd>@@M-g m@@html:</kbd>@@ (~telega-root-next-mention~)

  Move point to the next chat with mention.
* Chat Filters

Chat Filters are used to match chats, same as regexps are used to
match strings.  Chat Filters uses S-exp notation similar to ~rx~
package for regexps.

Primitive Chat Filter is a specifier to match some property of the
chat.  Each primitive Chat Filter has name (elisp symbol) and
corresponding function named ~telega--filter-<FILTER-NAME>~.
You can specify primitive Chat Filter in either way:
1. ~<FILTER-NAME>~
2. ~( <FILTER-NAME> <ARG1> [<ARG2> ...] )~

Primitive Chat Filters are combined using ~and~, ~or~ and ~not~
filters, forming final Chat Filter.  So Chat Filter is a logical
combination of other Chat Filters, down to primitive Chat Filters.

Chat Filter examples:
- all :: 
     Matches all chats

- (or saved-messages (type channel bot)) :: 
     Matches bots/channels chats or "Saved Messages" chat

- (and unmuted (unread 10) (mention 1)) :: 
     Matches unmuted chats with at least 10 unread messages and at
     least one message with unread mention

** List of chat filters

- (any ~FILTER-LIST~...) :: 
     Matches if any filter in ~FILTER-LIST~ matches.

- (or ~FILTER-LIST~...) :: 
     Same as ~any~

- (all ~FILTER-LIST~...) :: 
     Matches if all filters in ~FILTER-LIST~ matches. Also matches if ~FILTER-LIST~ is empty.

- (and ~FILTER-LIST~...) :: 
     Same as ~all~

- (not ~FILTER~) :: 
     Matches if ~FILTER~ not maches.

  - Key (rootbuf): @@html:<kbd>@@/ !@@html:</kbd>@@ (~telega-filters-negate~)
    Negate active filters.

- (type ~CHAT-TYPE-LIST~) :: 
     Matches if chat type is one of ~CHAT-TYPE-LIST~.

     See [[#chat-types][Chat types]]

  - Key (rootbuf): @@html:<kbd>@@/ t@@html:</kbd>@@ (~telega-filter-by-type~)
    Filter chats by its type.

- (name ~REGEXP~) :: 
     Matches if chat's title matches ~REGEXP~.

- (custom ~NAME~) :: 
     Matches if custom filter with ~NAME~ matches.

- pin :: 
     Matches if chat is pinned.

- has-pinned-message :: 
     Matches if chat has pinned message.

- (unread [ ~N~ ]) :: 
     Matches if chat has least ~N~ unread messages. By default ~N~ is 1. Also matches chats marked as unread.

- (mention [ ~N~ ]) :: 
     Matches if chat has least ~N~ unread mentions. By default ~N~ is 1.

- unmuted :: 
     Matches if chat has enabled notifications.

- (user-status ~STATUS-LIST~...) :: 
     Matches private chat where user status is one of ~STATUS-LIST~.

     Each element in ~STATUS-LIST~ is one of: "Online", "Offline",
     "Recently", "LastWeek", "LastMonth" or "Empty"

- verified :: 
     Matches if chat is verified.

- (ids ~ID-LIST~...) :: 
     Matches if chat's id is one of in ~ID-LIST~.

- me-is-member :: 
     Matches if me is member of the chat.

- has-last-message :: 
     Matches if chat has last message.

- has-order :: 
     Matches if chat has non-0 order.

     Only chats with non-0 order are listed in rootbuf.  I.e. this
     filter is implicitly applied along with active chat filter.

- has-avatar :: 
     Matches if chat has chat photo.

- opened :: 
     Matches if chat has corresponding chatbuf.

- (permission ~PERM~) :: 
     Matches if chat has ~PERM~ set in chat permissions. ~PERM~ could be one of: ~:can_send_messages~, ~:can_send_media_messages~, ~:can_send_polls~, ~:can_send_other_messages~, ~:can_add_web_page_previews~, ~:can_change_info~, ~:can_invite_users~, ~:can_pin_messages~

- (restriction ~SUFFIX-LIST~...) :: 
     Matches restricted chats.

     Each element in ~SUFFIX-LIST~ is one of:
  - "-all" - Restricted on all platforms
  - "-ios" - Restricted for iOS devices
  - "-android" - Restricted for Android devices
  - "-wp" - Restricted on Windows

  If ~SUFFIX-LIST~ is ommited, then match any reason.

- (contact [ ~MUTUAL-P~ ]) :: 
     Matches private chats if corresponding user is a contact. If ~MUTUAL-P~ is non-nil, then mach only if contact is mutual.

- top :: 
     Matches if chat is in top usage.

- saved-messages :: 
     Matches only SavedMessages chat.

- (label ~LABEL~) :: 
     Matches chat with custom ~LABEL~.

- tracking :: 
     Matches if chat is in tracking buffers list.

- last-message-by-me :: 
     Matches if chat's last message sent by me.

- (chat-list ~LIST-NAME~) :: 
     Matches if chat is in chat list named ~LIST-NAME~. Only "Main" and "Archive" names are supported.

- main :: 
     Matches if chat from "Main" chat list.

- archive :: 
     Matchis if chat is archived, i.e. in "Archive" chat list.

- has-scheduled-messages :: 
     Matches if chat has scheduled messages.
* Sorting Chats

It is possible to sort chats in rootbuf out of Telega built-in
order.  Sorting chats is done by some criteria.  Built-in criterias
are in ~telega-sort-criteria-alist~.  Do not insert criterias
directly into ~telega-sort-criteria-alist~, use
~define-telega-sorter~ instead.

- @@html:<kbd>@@\@@html:</kbd>@@ :: 
     rootbuf prefix map for sorting commands

- @@html:<kbd>@@\ \@@html:</kbd>@@ (~telega-sort-reset~) :: 
     Reset active sorter.

     It is possible to add multiple criteria using ~telega-sort-reset~
     with prefix argument @@html:<kbd>@@C-u@@html:</kbd>@@.

- @@html:<kbd>@@\ s@@html:</kbd>@@, @@html:<kbd>@@\ a@@html:</kbd>@@ (~telega-sort-by-sorter~) :: 
     Interactively add ~CRITERIA~ to active sorter. If prefix ~ARG~ is used, then add sort criteria, instead of overwritting currently active one.

     Use this command to reset active sorter.

** Sorting criteria

- ~unread-count~, @@html:<kbd>@@\ u@@html:</kbd>@@ (~telega-sort-by-unread-count~) :: 


- ~title~, @@html:<kbd>@@\ t@@html:</kbd>@@ (~telega-sort-by-title~) :: 
     Sort chats by number of online members. (thanks to https://t.me/Kurvivor)

- ~member-count~, @@html:<kbd>@@\ m@@html:</kbd>@@ (~telega-sort-by-member-count~) :: 
     Sort chats by number of members in the chat.

- ~online-members~, @@html:<kbd>@@\ o@@html:</kbd>@@ (~telega-sort-by-online-members~) :: 
     Sort chats by number of online members.

- ~join-date~, @@html:<kbd>@@\ j@@html:</kbd>@@ (~telega-sort-by-join-date~) :: 
     Sort chats by join date.  Last joined chats goes first.

- TODO Date of last message sent by ~telega-user-me~
- TODO Date of last mention (thanks to https://t.me/lainposter)
* Chat buffer

*TODO*: describe chatbuf functionality

** Chat types

Every chat has a type.  Type is one of:
- private :: Private chat with telegram user
- secret :: Secret chat with telegram user
- bot :: Chat with telegram bot
- basicgroup :: Small chat group, could be upgraded to supergroup
- supergroup :: Chat group with all the chat possibilities
- channel :: Supergroup with unlimited members, where only admins can post messags

** Custom chat label

Chat can be assigned with custom label using
@@html:<kbd>@@L@@html:</kbd>@@ (~telega-chat-set-custom-label~)
pressed on chat button.

Custom chat labels is one of the ways to group chats together.
Labeled chats can be easily filtered using ~label~ chat filter.
See [[#chat-filters][Chat Filters]]
* Minor Modes

=telega= ships with various minor modes you might consider to use.

** telega-mode-line-mode

Global minor mode to display =telega= status in modeline.

Enable with ~(telega-mode-line-mode 1)~, or at =telega= load time:
#+begin_src emacs-lisp
  (add-hook 'telega-load-hook 'telega-mode-line-mode)
#+end_src

Customizable options:

- User Option: ~telega-mode-line-string-format~

  Format in mode-line-format for ~telega-mode-line-string~.

** telega-url-shorten-mode

Minor mode for chatbuf to show shorter version for some URLs.  For
example, with ~telega-url-shorten-mode~ enabled in chatbuf, urls
like:

#+begin_example
  https://github.com/zevlg/telega.el/issues/105
  https://gitlab.com/jessieh/mood-line/issues/6
  https://www.youtube.com/watch?v=0m2jR6_eMkU
  https://ru.wikipedia.org/wiki/Ð”ÑƒÑˆ
#+end_example

Will look like:
[[https://zevlg.github.io/telega/telega-url-shorten.png]]

Can be enabled globally in all chats matching
~telega-url-shorten-mode-for~ (see below) chat filter with
~(global-telega-url-shorten-mode 1)~ or by adding:

#+begin_src emacs-lisp
  (add-hook 'telega-load-hook 'global-telega-url-shorten-mode)
#+end_src

Also consider installing =font-awesome= to display icons for
shorten URLs even in tty.

- User Option: ~telega-url-shorten-mode-for~, default=all

  Chat filter for ~global-telega-url-shorten-mode~.
~global-telega-url-shorten-mode~ enables urls shortening only for
chats matching this chat filter.

** telega-squash-message-mode

Minor mode for chatbuf to squash messages into single one while
nobody see this.

Squashing mean adding contents of the new message to the previous
message by editing contents of the previous message.

New message in chat is squahed into your previous message only if
all the conditions are met:

1. Last message in chat is sent by you
2. Nobody seen your last message
3. Last and new message are both text messages
4. Last and new messages are *not* replying to any message

Can be enabled globally in all chats matching
~telega-squash-message-mode-for~ (see below) chat filter with
~(global-telega-squash-message-mode 1)~ or by adding:

#+begin_src emacs-lisp
  (add-hook 'telega-load-hook 'global-telega-squash-message-mode)
#+end_src
